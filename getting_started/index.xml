<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on LLMIR</title><link>https://chenxingqiang.github.io/llmir-www/getting_started/</link><description>Recent content in Getting Started on LLMIR</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 09 May 2024 15:26:15 +0000</lastBuildDate><atom:link href="https://chenxingqiang.github.io/llmir-www/getting_started/index.xml" rel="self" type="application/rss+xml"/><item><title>FAQ</title><link>https://chenxingqiang.github.io/llmir-www/getting_started/Faq/</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://chenxingqiang.github.io/llmir-www/getting_started/Faq/</guid><description>Frequently Asked Questions about LLMIR What is LLMIR? LLMIR (Large Language Model Intermediate Representation) is a compiler infrastructure for large language models based on MLIR (Multi-Level Intermediate Representation). It&amp;rsquo;s designed to optimize and accelerate LLM inference through specialized compilation techniques, providing a unified intermediate representation layer for different LLM frameworks.
What problem does LLMIR solve? LLMIR addresses several key challenges in LLM inference:
Performance bottlenecks: By applying compiler optimization techniques, LLMIR reduces inference latency and improves throughput.</description></item><item><title>Reporting Issues</title><link>https://chenxingqiang.github.io/llmir-www/getting_started/ReportingIssues/</link><pubDate>Wed, 27 Apr 2022 10:30:15 +0000</pubDate><guid>https://chenxingqiang.github.io/llmir-www/getting_started/ReportingIssues/</guid><description>Issues with MLIR can be reported through GitHub. Report the issue for the llvm-project repository at https://github.com/llvm/llvm-project/issues/new. If possible, attach the &amp;ldquo;mlir&amp;rdquo; label (label management may be limited to accounts that have a contribution history). Several other labels prefixed with &amp;ldquo;mlir:&amp;rdquo; are available if the issue can be classified further, for example, &amp;ldquo;mlir:core&amp;rdquo; can be used for issues with MLIR core libraries (mlir/lib/IR, mlir/lib/Interfaces, etc.) and &amp;ldquo;mlir:affine&amp;rdquo; can be used for issues with MLIR Affine dialect.</description></item><item><title>Debugging Tips</title><link>https://chenxingqiang.github.io/llmir-www/getting_started/Debugging/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://chenxingqiang.github.io/llmir-www/getting_started/Debugging/</guid><description>Inspecting compilation There&amp;rsquo;s no silver bullet for debugging the compilation process. Standard debugging techniques (printf debugging, gdb/lldb, IDE graphical debuggers, etc.) are of course applicable, but below are MLIR-specific facilities that are quite useful before diving into a generic debug flow. These facilities assume that you have reduced your problem to a form that can be reproduced with mlir-opt or another program that hooks into MLIR&amp;rsquo;s option parsing, if this is not the case, see section &amp;ldquo;Isolating test case&amp;rdquo; below.</description></item><item><title>How to Contribute</title><link>https://chenxingqiang.github.io/llmir-www/getting_started/Contributing/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://chenxingqiang.github.io/llmir-www/getting_started/Contributing/</guid><description>Everyone is welcome to contribute to MLIR. There are several ways of getting involved and contributing including reporting bugs, improving documentation and tutorials.
Community Guidelines Please be mindful of the LLVM Code of Conduct, which pledges to foster an open and welcoming environment.
Contributing code Please send pull-request on GitHub. If you don&amp;rsquo;t have write access to the repo, just leave a comment asking the reviewer to hit the merge button it for you.</description></item><item><title>Open Projects</title><link>https://chenxingqiang.github.io/llmir-www/getting_started/openprojects/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://chenxingqiang.github.io/llmir-www/getting_started/openprojects/</guid><description>Below is a list of projects that can be suitable for Google Summer of Code (GSOC) or just for someone to get started with contributing to MLIR. See also the &amp;ldquo;beginner&amp;rdquo; issues on the bugtracker. If you&amp;rsquo;re interested in one of these projects, feel free to discuss it on the MLIR section of the LLVM forums or on the MLIR channel of the LLVM discord server. The mentors are indicative and suggestion of first point of contact for starting on these projects.</description></item><item><title>Glossary</title><link>https://chenxingqiang.github.io/llmir-www/getting_started/Glossary/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://chenxingqiang.github.io/llmir-www/getting_started/Glossary/</guid><description>This glossary contains definitions of MLIR-specific terminology. It is intended to be a quick reference document. For terms which are well-documented elsewhere, definitions are kept brief and the header links to the more in-depth documentation.
Block A sequential list of operations without control flow.
Also called a basic block.
Conversion The transformation of code represented in one dialect into a semantically equivalent representation in another dialect (i.e. inter-dialect conversion) or the same dialect (i.</description></item><item><title>Testing Guide</title><link>https://chenxingqiang.github.io/llmir-www/getting_started/TestingGuide/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://chenxingqiang.github.io/llmir-www/getting_started/TestingGuide/</guid><description>Quickstart commands Run all MLIR tests: Run integration tests (requires -DMLIR_INCLUDE_INTEGRATION_TESTS=ON): Run C++ unit tests: Run lit tests in a specific directory Run a specific lit test file Test categories lit and FileCheck tests Diagnostic tests Integration tests C++ Unit tests Contributor guidelines FileCheck best practices Test Formatting Best Practices Test Documentation Best Practices Quickstart commands These commands are explained below in more detail. All commands are run from the cmake build directory build/, after building the project.</description></item><item><title>Developer Guide</title><link>https://chenxingqiang.github.io/llmir-www/getting_started/DeveloperGuide/</link><pubDate>Thu, 09 May 2024 15:26:15 +0000</pubDate><guid>https://chenxingqiang.github.io/llmir-www/getting_started/DeveloperGuide/</guid><description>LLMIR Developer Guide This guide provides an overview of how to develop with LLMIR.
Building LLMIR LLMIR is built on top of the MLIR ecosystem. To build LLMIR, you&amp;rsquo;ll need:
A C++ compiler (GCC or Clang) with C++17 support CMake (3.13.4 or higher) Python (3.7 or higher) Ninja or Make build system Clone the Repository git clone https://github.com/chenxingqiang/llmir.git cd llmir Configure the Build mkdir build &amp;amp;&amp;amp; cd build cmake -G Ninja .</description></item></channel></rss>